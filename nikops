#! /usr/bin/env nix-shell
#! nix-shell -i bash ./shell.nix

K8S_RES=$(nix-instantiate --eval -E '<k8s-res>')
K8S_PKI=$(nix-instantiate --eval -E '<k8s-pki>')

readCASpec() {
    if [ -f $K8S_PKI/ca.json ]; then
        cat $K8S_PKI/ca.json
    else
        cat $K8S_RES/pki/ca.json
    fi
}

generate_pki() {
    if ! [ -f $K8S_PKI/ca.pem ]; then
        readCASpec | cfssl genkey -initca - | cfssljson -bare $K8S_PKI/ca
    fi

    CFSSL_API_TOKEN_LENGTH=32

    if ! [ -f $K8S_PKI/apitoken.secret ]; then
        echo Generate API Token for CA interaction
        head -c $(($CFSSL_API_TOKEN_LENGTH / 2)) /dev/urandom | od -An -t x | tr -d ' ' > $K8S_PKI/apitoken.secret
    fi
}

NIKOPS_DIR=$(dirname $0)

initialize_deploy() {
    if ! [ -f ./default.nix ]; then
        cp $NIKOPS_DIR/examples/nodes-on-single-libvirt-host.nix ./default.nix
    fi

    if ! nixops info $@ 1>/dev/null 2>&1; then
        nixops create . $@
    fi
}

execute_deploy() {
    nixops deploy $@
}

get_libvirt_hosts() {
    hosts=$(for node in $(nixops info --plain $@ | grep -v network | cut -f1); do
                printf "%s " $(nixops show-option $@ $node deployment.libvirtd.URI | sed -ne 's|^"qemu.*//\(.*\)/system"$|\1|p')
            done)
    echo "$hosts" | tr " " "\n" | sort -u | tr "\n" " "
}

setup_ssh_key_auth() {
    for host in $(get_libvirt_hosts $@); do
        ssh-copy-id $host -f
    done
}

clean_node_ssh_known_hosts() {
    hosts=$(for node in $(nixops info --plain $@ | grep -v network | cut -f1); do
                printf "%s " $(nixops show-option $@ $node deployment.targetHost | tr -d '"')
            done)
    for host in $hosts; do
        ssh-keygen -R $host -f ~/.ssh/known_hosts
    done
}

setup_overlay_network() {
    subnet=$(for node in $(nixops info --plain $@ | grep -v network | cut -f1); do
                 printf "%s"  $(echo $(nixops show-option $@ $node networking.interfaces.enp0s2.ipv4.addresses.0.address) | tr -d '"')
                 printf "/%s" $(echo $(nixops show-option $@ $node networking.interfaces.enp0s2.ipv4.addresses.0.prefixLength))
                 break
             done)
    subnet=$(python -c "import ipaddress;print ipaddress.ip_network(u'$subnet',strict=False).with_prefixlen")
    myaddr=$(python -c "import ipaddress;print ipaddress.ip_network(u'$subnet',strict=False)[1]")

    self=$(hostname -I | cut -f1 -d ' ')
    hosts=$(get_libvirt_hosts $@)
    peers=$(echo "$self $hosts" | sed -nE 's/[^ ]+@([^ ]+( |$))/\1/gp' | tr ' ' '\n' | sort -u | tr '\n' ' ')

    echo "$subnet"

    for host in $self $hosts; do
        script=$(cat <<EOF
        sudo ovs-vsctl br-exists nikops-net && exit 0
        sudo ovs-vsctl add-br nikops-net -- set interface nikops-net mtu_request=1450
        sudo ovs-vsctl set bridge nikops-net stp_enable=true

        i=0
        for peer in $peers
        do
            if echo "$host" | grep -q "\$peer"
            then
               continue
            fi
            echo Link peer \$peer by port vxlan\$i

            sudo ovs-vsctl add-port nikops-net vxlan\$i -- set interface vxlan\$i type=vxlan options:remote_ip=\$peer options:key=nikops-net
            i=\$((\$i+1))
        done

        sudo ip link set dev nikops-net up

        sudo ip route add $subnet dev nikops-net
EOF
        )

        if echo "$host" | grep -q "$self"; then
            sudo ovs-vsctl br-exists nikops-net && continue

            echo Setup ovs bridge and vxlan on local...
            eval "$script"
            sudo ip addr add $myaddr dev nikops-net
        else
            echo Setup ovs bridge and vxlan on $host...
            ssh -t $host "$script"
        fi
    done
}

destroy_overlay_network() {
    self=$(hostname -I | cut -f1 -d ' ')
    hosts=$(get_libvirt_hosts $@)
    for host in $self $hosts; do
        script="sudo ovs-vsctl br-exists nikops-net && sudo ovs-vsctl del-br nikops-net"

        if echo "$host" | grep -q "$self"; then
            sudo ovs-vsctl br-exists nikops-net || continue

            echo Destroy ovs bridge on local...
            eval "$script"
        else
            echo Destroy ovs bridge on $host...
            ssh -t $host "$script"
        fi
    done
}

show_overlay_network() {
    hosts=$(get_libvirt_hosts $@)
    for host in $hosts; do
        script="sudo ovs-vsctl show"

        echo $host...
        ssh -t $host "$script"
    done
}

SUB_COMMAND=$1
shift

if ! echo "$@" | egrep "^.*(-d |--deploy).*$"; then
    DEFAULT_DEPLOYMENT_NAME=" -d nikops"
fi

case "$SUB_COMMAND" in
    create)
        generate_pki
        initialize_deploy $@ $DEFAULT_DEPLOYMENT_NAME
        setup_ssh_key_auth $DEFAULT_DEPLOYMENT_NAME
        ;;
    deploy)
        generate_pki
        initialize_deploy $DEFAULT_DEPLOYMENT_NAME
        execute_deploy $@ $DEFAULT_DEPLOYMENT_NAME
        ;;
    kubectl|k8s|kubernetes|cluster)
        MASTER_NODE=$(nixops ssh-for-each $DEFAULT_DEPLOYMENT_NAME -- 'which kubectl 1>/dev/null 2>&1 && printf "nikops> master name is %s" $(cat /etc/hostname)' 2>&1 \
                          | sed -ne 's/^.*> *nikops> master name is \(.*\)$/\1/p')
        nixops ssh $DEFAULT_DEPLOYMENT_NAME $MASTER_NODE kubectl --kubeconfig=/etc/kubernetes/cluster-admin.kubeconfig $@
        ;;
    overlay-network) #experimental
        SUBSUB_COMMAND=$1
        shift
        case "$SUBSUB_COMMAND" in
            deploy)
                setup_overlay_network $@ $DEFAULT_DEPLOYMENT_NAME
                ;;
            destroy)
                destroy_overlay_network $@ $DEFAULT_DEPLOYMENT_NAME
                ;;
            info)
                show_overlay_network $@ $DEFAULT_DEPLOYMENT_NAME
                ;;
        esac
        ;;
    destroy|delete)
        clean_node_ssh_known_hosts
        ;&
    *)
        nixops $SUB_COMMAND $DEFAULT_DEPLOYMENT_NAME $@
        ;;
esac
